getwd（
getwd（）
getwd()
source("scripts/functions.r")
source("scripts/My helper functions.r")
source("scripts/functions.R")
source("scripts/functions.R")
source("scripts/external scripts/HWEtesterror.R")
source('~/Documents/GitHub/stepis/.Rprofile')
install.packages("genetics")
loadObj(fsdata, "data/stroke_dat_1201.rds")
source('~/Documents/GitHub/stepis/.Rprofile')
loadObj(fsdata, "data/stroke_dat_1201.rds")
source('~/Documents/GitHub/stepis/.Rprofile')
install.packages("labelled")
source('~/Documents/GitHub/stepis/.Rprofile')
loadObj(fsdata, "data/stroke_dat_1201.rds")
source('~/Documents/GitHub/stepis/scripts/My helper functions.R')
loadObj(fsdata, "data/stroke_dat_1201.rds")
?import
install.packages("import")
source('~/Documents/GitHub/stepis/scripts/My helper functions.R')
source('~/Documents/GitHub/stepis/scripts/My helper functions.R')
loadObj(fsdata, "data/stroke_dat_1201.rds")
install.packages("rio")
loadObj(fsdata, "data/stroke_dat_1201.rds")
install_formats()
loadObj(fsdata, "data/stroke_dat_1201.rds")
## stroke patients and controls
# stroke_data <- fsdata %>% dplyr::filter(!is.na(family_no_isstroke))
# write_excel_csv(stroke_data,"data\\stk_dat_1112_utf8.csv")
## get all SNPs
SNP_names <- getSNPName(fsdata)
## get Summary of the SNPs
# allele frequency
Al_Freq_table <- map_dfr(SNP_names,
getAlleleFrequency,
data = fsdata,
drop.freq = FALSE)
source('~/Documents/GitHub/stepis/scripts/functions.R')
## get Summary of the SNPs
# allele frequency
Al_Freq_table <- map_dfr(SNP_names,
getAlleleFrequency,
data = fsdata,
drop.freq = FALSE)
View(Al_Freq_table)
Al_Freq_table <- Al_Freq_table %>% select(rsid, A,T,G,C,A_N,T_N,G_N,C_N)
Al_Freq_table <- Al_Freq_table %>% dplyr::select(rsid, A,T,G,C,A_N,T_N,G_N,C_N)
View(Al_Freq_table)
write_excel_csv(Al_Freq_table, "results\\Allele_Freq.csv")
# genotype frquency
geno_freq_table <- map_dfr(SNP_names, genoFreq, data = stroke_data)
# genotype frquency
geno_freq_table <- map_dfr(SNP_names, genoFreq, data = fsdata)
source('~/Documents/GitHub/stepis/scripts/functions.R')
# genotype frquency
geno_freq_table <- map_dfr(SNP_names, genoFreq, data = fsdata)
write_excel_csv(geno_freq_table, "results\\genotype_Freq.csv")
View(geno_freq_table)
source('~/Documents/GitHub/stepis/scripts/functions.R')
# genotype frquency
geno_freq_table <- map_dfr(SNP_names, genoFreq, data = fsdata)
View(geno_freq_table)
source('~/Documents/GitHub/stepis/scripts/functions.R')
# genotype frquency
geno_freq_table <- map_dfr(SNP_names, genoFreq, data = fsdata)
View(geno_freq_table)
# chunk SNP with calling rate > 0.5
SNP_keep <- getVariable(geno_freq_table, rsid, miss_freq < 0.5) %>% unique()
SNP_remove <- setdiff(SNP_names, SNP_keep)
## remove imcomplete samples
fsdata <- fsdata %>%
select(-one_of(SNP_remove)) %>%
mutate(call_num = rowSums(is.na(.[SNP_keep])))
## remove imcomplete samples
fsdata <- fsdata %>%
dplyr::select(-one_of(SNP_remove)) %>%
mutate(call_num = rowSums(is.na(.[SNP_keep])))
View(fsdata)
table(fsdata$stroke_proven)
sum(is.na(isfamilly_no))
sum(is.na(fsdata$isfamilly_no))
sum(is.null(fsdata$isfamilly_no))
is.na(fsdata$stroke_proven)
sum(is.na(fsdata$stroke_proven))
sample.delete <- stroke_data %>%
filter(call_num > 100 |is.null(isfamily_no)|is.na(stroke_proven)|!stroke_proven %in% c(0,1))
sample.delete <- fsdata %>%
filter(call_num > 100 |is.null(isfamily_no)|is.na(stroke_proven)|!stroke_proven %in% c(0,1))
View(sample.delete)
## delete incompete families
stk_dat_comp <- fsdata %>%
dplyr::filter(! pid %in% sample.delete$pid) %>%
# fix erronous coding
filter(!family_no %in% c("1404113","1218") & !pid %in% c("3703", "142110704","142110705","170911702","170911703")) %>%
mutate(memid = ifelse(pid == "141411002",4,memid),
memid = ifelse(pid == "141411003",5,memid),
memid = ifelse(pid == "170910602",4,memid)) %>%
# calculate probands
mutate(id_aff = ifelse(stroke_proven == 1 & !memid %in% c(2,3), memid, 99),
proband_err = ifelse(memid == 1 & stroke_proven != 1, 1, 0),
pid = as.character(pid)) %>%
group_by(family_no) %>%
mutate(proband = min(id_aff, na.rm = TRUE),
memid = ifelse(proband_err == 1, max(memid)+1, memid),
memid = ifelse(!is.na(proband) & memid !=1 & memid == proband, 1, memid),
n_fam = n()) %>%
filter(n_fam >= 2 & proband != 99) %>%
# delete unrelated variables
select(-id_aff,-proband, -proband_err, -n_fam) %>%
ungroup()
source('~/Documents/GitHub/stepis/scripts/2 prepare data based on family level.R')
loadObj(fsdata, "data/stroke_dat_1201.rds")
## stroke patients and controls
# stroke_data <- fsdata %>% dplyr::filter(!is.na(family_no_isstroke))
# write_excel_csv(stroke_data,"data\\stk_dat_1112_utf8.csv")
## get all SNPs
SNP_names <- getSNPName(fsdata)
## get Summary of the SNPs
# allele frequency
Al_Freq_table <- map_dfr(SNP_names,
getAlleleFrequency,
data = fsdata,
drop.freq = FALSE)
Al_Freq_table <- Al_Freq_table %>% dplyr::select(rsid, A,T,G,C,A_N,T_N,G_N,C_N)
write_excel_csv(Al_Freq_table, "results\\Allele_Freq.csv")
# genotype frquency
geno_freq_table <- map_dfr(SNP_names, genoFreq, data = fsdata)
write_excel_csv(geno_freq_table, "results\\genotype_Freq.csv")
# chunk SNP with calling rate > 0.5
SNP_keep <- getVariable(geno_freq_table, rsid, miss_freq < 0.5) %>% unique()
SNP_remove <- setdiff(SNP_names, SNP_keep)
## remove imcomplete samples
fsdata <- fsdata %>%
dplyr::select(-one_of(SNP_remove)) %>%
mutate(call_num = rowSums(is.na(.[SNP_keep])))
sample.delete <- fsdata %>%
filter(call_num > 100 |is.null(isfamily_no)|is.na(stroke_proven)|!stroke_proven %in% c(0,1))
## delete incompete families
stk_dat_comp <- fsdata %>%
dplyr::filter(! pid %in% sample.delete$pid) %>%
# fix erronous coding
filter(!family_no %in% c("1404113","1218") & !pid %in% c("3703", "142110704","142110705","170911702","170911703")) %>%
mutate(memid = ifelse(pid == "141411002",4,memid),
memid = ifelse(pid == "141411003",5,memid),
memid = ifelse(pid == "170910602",4,memid)) %>%
# calculate probands
mutate(id_aff = ifelse(stroke_proven == 1 & !memid %in% c(2,3), memid, 99),
proband_err = ifelse(memid == 1 & stroke_proven != 1, 1, 0),
pid = as.character(pid)) %>%
group_by(family_no) %>%
mutate(proband = min(id_aff, na.rm = TRUE),
memid = ifelse(proband_err == 1, max(memid)+1, memid),
memid = ifelse(!is.na(proband) & memid !=1 & memid == proband, 1, memid),
n_fam = n()) %>%
filter(n_fam >= 2 & proband != 99) %>%
# delete unrelated variables
dplyr::select(-id_aff,-proband, -proband_err, -n_fam) %>%
ungroup()
# genotype freq after remove
geno_freq_table <- map_dfr(SNP_keep, genoFreq, data = stk_dat_comp) %>% arrange(miss_freq)
View(geno_freq_table)
## output to data
write_rds(stk_dat_comp,"data\\stk_dat.rds")
stk_dat <- read_rds("data\\stk_dat.rds")
View(hwe_unrelate)
length(distinct(stk_dat$family_no))
length(unique(stk_dat$family_no))
## output to data
write_rds(stk_dat_comp,"data\\stk_dat.rds")
## output to data
write_rds(stk_dat_comp,"data/stk_dat.rds")
loadObj(stk_dat, "data/stk_dat.rds")
loadObj(fsdata,"data/stroke_dat_1201.rds")
## discriptive family information
fsdata_summary <- setDT(fsdata)[,.(sib_num = sum(memid %in% c(1,4,5,6,7,8,9)),
fa_num = sum(memid == 2),
mo_num = sum(memid == 3),
pa_num = fa_num + mo_num), family_no]
library(data.table)
## discriptive family information
fsdata_summary <- setDT(fsdata)[,.(sib_num = sum(memid %in% c(1,4,5,6,7,8,9)),
fa_num = sum(memid == 2),
mo_num = sum(memid == 3),
pa_num = fa_num + mo_num), family_no]
# conditional logistic regression
snps <- colnames(stk_dat) %>% str_subset("^rs")
## discriptive family information
fsdata_summary <- setDT(fsdata)[,.(sib_num = sum(memid %in% c(1,4,5,6,7,8,9)),
fa_num = sum(memid == 2),
mo_num = sum(memid == 3)), family_no]
View(fsdata_summary)
## discriptive family information
fsdata_summary <- setDT(fsdata)[,.(sib_num = sum(memid %in% c(1,4,5,6,7,8,9)),
fa_num = sum(memid == 2),
mo_num = sum(memid == 3)), family_no][,pa_num = fa_num+mo_num]
## discriptive family information
fsdata_summary <- setDT(fsdata)[,.(sib_num = sum(memid %in% c(1,4,5,6,7,8,9)),
fa_num = sum(memid == 2),
mo_num = sum(memid == 3)), family_no][,.pa_num = fa_num+mo_num]
## discriptive family information
fsdata_summary <- setDT(fsdata)[,.(sib_num = sum(memid %in% c(1,4,5,6,7,8,9)),
fa_num = sum(memid == 2),
mo_num = sum(memid == 3)), family_no][,.(pa_num = fa_num+mo_num)]
## discriptive family information
fsdata_summary <- setDT(fsdata)[,.(sib_num = sum(memid %in% c(1,4,5,6,7,8,9)),
fa_num = sum(memid == 2),
mo_num = sum(memid == 3)), family_no][,.(sib_num,fa_num,mo_num,pa_num = fa_num+mo_num)]
View(fsdata_summary)
loadObj(stk_dat, "data/stk_dat.rds")
loadObj(fsdata,"data/stroke_dat_1201.rds")
library(data.table)
## discriptive family information
fsdata_summary <- setDT(fsdata)[,.(sib_num = sum(memid %in% c(1,4,5,6,7,8,9)),
fa_num = sum(memid == 2),
mo_num = sum(memid == 3)), family_no][,.(sib_num,fa_num,mo_num,pa_num = fa_num+mo_num)]
table1 <- fsdata_summary[,.(sum_pop = .N, sum_fa = sum(fa_num), sum_mo = sum(mo_num), sum_pa = sum(pa_num ==2)), sib_num] %>%
arrange(sib_num)
View(table1)
2384/1001
View(table1)
table1 <- fsdata_summary[,.(sum_pop = .N, sum_no_pa = sum(pa_num == 0),sum_fa = sum(fa_num), sum_mo = sum(mo_num), sum_pa = sum(pa_num ==2)), sib_num] %>%
arrange(sib_num)
View(table1)
table(fsdata$stroke_subtype)
table(stk_dat$stroke_subtype)
18+3+90+3+44
# table 2 disease status
fsdata_summary_dis <- setDT(fsdata)[memid %in% c(1,4,5,6,7,8,9),.(sib_num = .N,
case_only = (sum(stroke_proven) ==.N),
control_only = (sum(stroke_proven) == 0),
discordant = (sum(stroke_proven) < .N & sum(stroke_proven)>0)) ,family_no]
View(fsdata_summary_dis)
View(fsdata_summary_dis)
table2 <- fsdata_summary_dis[,.(sum_co = sum(case_only), sum_con = sum(control_only), sum(discordant) = sum(discordant)), sib_num]
table2 <- fsdata_summary_dis[,.(sum_co = sum(case_only), sum_con = sum(control_only), sum_dis = sum(discordant)), sib_num]
View(table2)
table2 <- fsdata_summary_dis[,.(sum_co = sum(case_only), sum_con = sum(control_only), sum_dis = sum(discordant)), sib_num] %>%
arrange(sib_num)
View(table2)
View(table1)
View(table2)
library(stargazer)
table(fsdata$dm)
table(fsdata$dm_2)
table(fsdata$dm_2, useNA = TRUE)
table(fsdata$dm_2, useNA = "ifany")
table(fsdata$dm, useNA = "ifany")
table(fsdata$ht, useNA = "ifany")
